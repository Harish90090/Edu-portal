const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

// Import routes
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const chatRoutes = require('./routes/chatRoutes');

// Import models
const User = require('./models/User');
const Message = require('./models/Message');
const ChatSession = require('./models/ChatSession');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
Â  Â  cors: {
Â  Â  Â  Â  origin: ["http://localhost:3000", "http://127.0.0.1:5500", "http://localhost:5500", "http://localhost:8080"],
Â  Â  Â  Â  methods: ["GET", "POST"]
Â  Â  }
});

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB Connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://harishachar9090_db_user:pJbpolPttMx4A8VR@cluster0.448oax9.mongodb.net/st-portal?retryWrites=true&w=majority&appName=Cluster0';

mongoose.connect(MONGODB_URI)
.then(() => console.log(' MongoDB connected successfully'))
.catch(err => console.log(' MongoDB connection error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api', userRoutes);
app.use('/api/chat', chatRoutes);

// Health check route
app.get('/api/health', (req, res) => {
Â  Â  res.json({ 
Â  Â  Â  Â  status: 'OK', 
Â  Â  Â  Â  database: mongoose.connection.readyState === 1 ? 'Connected' : 'Disconnected',
Â  Â  Â  Â  message: 'EduPortal Server is running',
Â  Â  Â  Â  timestamp: new Date().toISOString()
Â  Â  });
});

// Socket.IO for real-time chat
const connectedUsers = new Map();

io.on('connection', (socket) => {
Â  Â  console.log('User connected:', socket.id);

Â  Â  socket.on('user_join', async (userId) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  connectedUsers.set(userId, socket.id);
Â  Â  Â  Â  Â  Â  socket.join(userId);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await User.findByIdAndUpdate(userId, { 
Â  Â  Â  Â  Â  Â  Â  Â  isOnline: true,
Â  Â  Â  Â  Â  Â  Â  Â  lastSeen: new Date()
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  socket.broadcast.emit('user_status_update', { 
Â  Â  Â  Â  Â  Â  Â  Â  userId: userId, 
Â  Â  Â  Â  Â  Â  Â  Â  isOnline: true 
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  console.log(`User ${userId} joined chat`);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Error in user_join:', error);
Â  Â  Â  Â  }
Â  Â  });

Â  Â  socket.on('send_message', async (data) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const { senderId, receiverId, message } = data;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const sender = await User.findById(senderId);
Â  Â  Â  Â  Â  Â  const receiver = await User.findById(receiverId);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (!sender || !receiver) {
Â  Â  Â  Â  Â  Â  Â  Â  socket.emit('message_error', { error: 'User not found' });
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  const newMessage = new Message({
Â  Â  Â  Â  Â  Â  Â  Â  sender: senderId,
Â  Â  Â  Â  Â  Â  Â  Â  receiver: receiverId,
Â  Â  Â  Â  Â  Â  Â  Â  message: message
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await newMessage.save();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await newMessage.populate('sender', 'firstName lastName type');
Â  Â  Â  Â  Â  Â  await newMessage.populate('receiver', 'firstName lastName type');
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const studentId = sender.type === 'student' ? senderId : receiverId;
Â  Â  Â  Â  Â  Â  const teacherId = sender.type === 'teacher' ? senderId : receiverId;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await ChatSession.findOneAndUpdate(
Â  Â  Â  Â  Â  Â  Â  Â  { student: studentId, teacher: teacherId },
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  student: studentId,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  teacher: teacherId,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lastMessage: message,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lastMessageTime: new Date(),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $inc: { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  unreadCount: 1,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  messageCount: 1
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  { upsert: true, new: true }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const receiverSocketId = connectedUsers.get(receiverId);
Â  Â  Â  Â  Â  Â  if (receiverSocketId) {
Â  Â  Â  Â  Â  Â  Â  Â  io.to(receiverId).emit('receive_message', newMessage);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  socket.emit('message_sent', newMessage);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Error sending message:', error);
Â  Â  Â  Â  Â  Â  socket.emit('message_error', { error: 'Failed to send message' });
Â  Â  Â  Â  }
Â  Â  });

Â  Â  socket.on('mark_messages_read', async (data) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const { userId, otherUserId } = data;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await Message.updateMany(
Â  Â  Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: otherUserId, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  receiver: userId, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  read: false 
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  { read: true }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  await ChatSession.findOneAndUpdate(
Â  Â  Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $or: [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { student: userId, teacher: otherUserId },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { student: otherUserId, teacher: userId }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  { unreadCount: 0 }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Error marking messages as read:', error);
Â  Â  Â  Â  }
Â  Â  });

Â  Â  socket.on('disconnect', async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  for (let [userId, socketId] of connectedUsers.entries()) {
Â  Â  Â  Â  Â  Â  Â  Â  if (socketId === socket.id) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  connectedUsers.delete(userId);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await User.findByIdAndUpdate(userId, { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isOnline: false,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lastSeen: new Date()
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  socket.broadcast.emit('user_status_update', { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  userId: userId, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isOnline: false 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log(`User ${userId} disconnected`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Error in disconnect:', error);
Â  Â  Â  Â  }
Â  Â  });

Â  Â  socket.on('typing_start', (data) => {
Â  Â  Â  Â  socket.to(data.receiverId).emit('user_typing', {
Â  Â  Â  Â  Â  Â  userId: data.senderId,
Â  Â  Â  Â  Â  Â  isTyping: true
Â  Â  Â  Â  });
Â  Â  });

Â  Â  socket.on('typing_stop', (data) => {
Â  Â  Â  Â  socket.to(data.receiverId).emit('user_typing', {
Â  Â  Â  Â  Â  Â  userId: data.senderId,
Â  Â  Â  Â  Â  Â  isTyping: false
Â  Â  Â  Â  });
Â  Â  });
});


// ----------------------------------------
// ðŸ‘‡ STATIC FILE SERVING CONFIGURATION ðŸ‘‡
// ----------------------------------------

// Assuming your structure is:
// - Edu-portal/
//   - backend/ (where this server.js file is)
//   - frontend/ (where index.html is)

// 1. Serve static assets from the 'frontend' directory.
// path.join(__dirname, '..', 'frontend') goes up one level ('..') from the backend folder 
// to the root, then into the 'frontend' folder.
app.use(express.static(path.join(__dirname, '..', 'frontend')));

// 2. Catch all GET requests that haven't been handled by your API routes (/api/*)
// and send the index.html file. This is crucial for single-page applications (SPAs) 
// and resolves the "Cannot GET /" error.
app.get('*', (req, res) => {
res.sendFile(path.join(__dirname, '..', 'frontend', 'index.html'));
});


const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
console.log(`Server running on http://localhost:${PORT}`);

});
